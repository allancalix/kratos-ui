// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Url from "../Url.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Route from "./Route.bs.js";
import * as React from "react";
import * as Kratos from "../Bindings/Kratos.bs.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as $$Promise from "reason-promise/src/js/promise.bs.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as KratosClient from "@ory/kratos-client";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

var opts = {
  basePath: Kratos.basePath
};

var api = new KratosClient.PublicApi(new KratosClient.Configuration(opts));

function renderInputs(fields) {
  return fields.map(function (field) {
              return React.createElement(React.Fragment, undefined, React.createElement("label", {
                              key: field.name,
                              className: "sr-only"
                            }, field.type !== "hidden" ? field.name : ""), React.createElement("input", {
                              defaultValue: field.value,
                              className: "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm",
                              name: field.name,
                              placeholder: field.name,
                              required: field.required,
                              type: field.type
                            }));
            });
}

function renderMessages(messages) {
  if (messages !== undefined) {
    return messages;
  } else {
    return [];
  }
}

function Register(Props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
        return {};
      });
  var setMethods = match[1];
  React.useEffect((function () {
          var id = Belt_Map.get(Url.parseSearchParams(url), "flow");
          if (id !== undefined) {
            $$Promise.get($$Promise.Js.$$catch(api.getSelfServiceRegistrationFlow(id), (function (err) {
                        console.log(err);
                        RescriptReactRouter.push(Route.register);
                        return $$Promise.Js.rejected(err);
                      })), (function (res) {
                    console.log(res);
                    if (res.status !== 200) {
                      RescriptReactRouter.push(Route.register);
                    }
                    return Curry._1(setMethods, (function (_prev) {
                                  return res.data.methods;
                                }));
                  }));
          } else {
            window.location.href = Kratos.registrationSelfServeEndpoint;
          }
          
        }), []);
  var loginForms = Js_dict.values(match[0]).map(function (method) {
        var messages = method.config.messages;
        return React.createElement("div", undefined, React.createElement("div", undefined, (
                          messages !== undefined ? messages : []
                        ).map(function (m) {
                            return React.createElement("p", {
                                        key: String(m.id)
                                      }, m.text);
                          })), React.createElement("form", {
                        className: "mt-8 space-y-6",
                        action: method.config.action,
                        method: method.config.method
                      }, renderInputs(method.config.fields), React.createElement("button", {
                            className: "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500",
                            type: "submit"
                          }, "Register")));
      });
  return React.createElement("div", {
              className: "min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8"
            }, React.createElement("div", {
                  className: "max-w-md w-full space-y-8"
                }, React.createElement("div", undefined, React.createElement("h1", {
                          className: "mt-6 text-center text-3xl font-extrabold text-gray-900"
                        }, "Registration")), loginForms));
}

var selfServeEndpoint = Kratos.registrationSelfServeEndpoint;

var make = Register;

export {
  selfServeEndpoint ,
  opts ,
  api ,
  renderInputs ,
  renderMessages ,
  make ,
  
}
/* api Not a pure module */
