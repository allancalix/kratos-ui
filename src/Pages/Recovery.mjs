// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Url from "../Url.mjs";
import * as Form from "../Components/Form.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as $$Window from "../Bindings/Window.mjs";
import * as $$Promise from "reason-promise/src/js/promise.mjs";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Messages from "./Messages.mjs";
import * as KratosClient from "../KratosClient.mjs";
import * as ActionMessages from "../Components/ActionMessages.mjs";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.mjs";

function Recovery(Props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
        
      });
  var setMethods = match[1];
  var methods = match[0];
  var match$1 = React.useState(function () {
        return Belt_Map.get(Url.parseSearchParams(url), "flow");
      });
  var setFlowID = match$1[1];
  React.useEffect((function () {
          var id = Belt_Map.get(Url.parseSearchParams(url), "flow");
          if (id !== undefined) {
            $$Promise.get($$Promise.Js.toResult(KratosClient.api.getSelfServiceRecoveryFlow(id)), (function (res) {
                    if (res.TAG === /* Ok */0) {
                      var payload = res._0;
                      return Curry._1(setMethods, (function (_prev) {
                                    return payload.data.ui;
                                  }));
                    }
                    var match = res._0.response.status;
                    if (match !== 410) {
                      return RescriptReactRouter.push("/login");
                    } else {
                      return Curry._1(setFlowID, (function (_prev) {
                                    
                                  }));
                    }
                  }));
          } else {
            var e = $$Window.redirect(KratosClient.recoverySelfServeEndpoint + Url.forwardSearchParams(url));
            if (e.TAG === /* Ok */0) {
              console.log("Window location set but page redirect failed.");
            } else {
              console.log(e._0);
            }
          }
          
        }), [match$1[0]]);
  var loginForms = function (container) {
    var m = container.messages;
    return React.createElement("div", {
                className: "min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8"
              }, React.createElement("div", {
                    className: "max-w-md w-full space-y-8"
                  }, React.createElement("div", undefined, React.createElement("h2", {
                            className: "mt-6 text-center text-3xl font-extrabold text-gray-900"
                          }, Messages.Recovery.title)), m !== undefined ? React.createElement(ActionMessages.make, {
                          messages: m
                        }) : null, React.createElement(Form.make, {
                        ui: container
                      })));
  };
  return React.createElement("div", undefined, methods !== undefined ? loginForms(methods) : null);
}

var make = Recovery;

export {
  make ,
  
}
/* Url Not a pure module */
