// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Url = require("../Url.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Route = require("./Route.bs.js");
var React = require("react");
var Kratos = require("../Bindings/Kratos.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var $$Promise = require("reason-promise/src/js/promise.bs.js");
var Belt_Map = require("rescript/lib/js/belt_Map.js");
var DynamicInputList = require("../Components/DynamicInputList.bs.js");
var KratosClient = require("@ory/kratos-client");
var RescriptReactRouter = require("@rescript/react/src/RescriptReactRouter.bs.js");

var opts = {
  basePath: Kratos.basePath
};

var api = new KratosClient.PublicApi(new KratosClient.Configuration(opts));

function renderMessages(messages) {
  if (messages !== undefined) {
    return messages;
  } else {
    return [];
  }
}

function Login(Props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
        return {};
      });
  var setMethods = match[1];
  React.useEffect((function () {
          var id = Belt_Map.get(Url.parseSearchParams(url), "flow");
          if (id !== undefined) {
            $$Promise.get($$Promise.Js.$$catch(api.getSelfServiceLoginFlow(id), (function (err) {
                        console.log(err);
                        RescriptReactRouter.push(Route.login);
                        return $$Promise.Js.rejected(err);
                      })), (function (res) {
                    if (res.status !== 200) {
                      RescriptReactRouter.push(Route.login);
                    }
                    return Curry._1(setMethods, (function (_prev) {
                                  return res.data.methods;
                                }));
                  }));
          } else {
            window.location.href = Kratos.loginSelfServeEndpoint;
          }
          
        }), []);
  var loginForms = Js_dict.values(match[0]).map(function (method) {
        var messages = method.config.messages;
        return React.createElement("div", {
                    className: "min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8"
                  }, React.createElement("div", {
                        className: "max-w-md w-full space-y-8"
                      }, React.createElement("div", undefined, React.createElement("h2", {
                                className: "mt-6 text-center text-3xl font-extrabold text-gray-900"
                              }, "Sign in"), React.createElement("p", {
                                className: "mt-2 text-center text-sm text-gray-600"
                              }, "Or ", React.createElement("a", {
                                    className: "font-medium text-indigo-600 hover:text-indigo-500",
                                    href: "#",
                                    onClick: (function (param) {
                                        return RescriptReactRouter.push(Route.register);
                                      })
                                  }, "register"))), (
                          messages !== undefined ? messages : []
                        ).map(function (m) {
                            return React.createElement("p", {
                                        key: String(m.id)
                                      }, m.text);
                          }), React.createElement("form", {
                            className: "mt-8 space-y-6",
                            action: method.config.action,
                            method: method.config.method
                          }, React.createElement("div", {
                                className: "mt-8 space-y-6"
                              }, React.createElement(DynamicInputList.make, {
                                    fields: method.config.fields
                                  })), React.createElement("div", {
                                className: "flex items-center justify-between"
                              }, React.createElement("div", {
                                    className: "text-sm"
                                  }, React.createElement("a", {
                                        className: "font-medium text-indigo-600 hover:text-indigo-500"
                                      }, "Forgot your password?"))), React.createElement("div", undefined, React.createElement("button", {
                                    className: "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500",
                                    type: "submit"
                                  }, "Sign in")))));
      });
  return React.createElement("div", undefined, loginForms);
}

var selfServeEndpoint = Kratos.loginSelfServeEndpoint;

var make = Login;

exports.selfServeEndpoint = selfServeEndpoint;
exports.opts = opts;
exports.api = api;
exports.renderMessages = renderMessages;
exports.make = make;
/* api Not a pure module */
