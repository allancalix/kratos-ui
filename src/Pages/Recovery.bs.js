// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Url = require("../Url.bs.js");
var Form = require("../Components/Form.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var $$Window = require("../Bindings/Window.bs.js");
var $$Promise = require("reason-promise/src/js/promise.bs.js");
var Belt_Map = require("rescript/lib/js/belt_Map.js");
var Messages = require("./Messages.bs.js");
var KratosClient = require("../KratosClient.bs.js");
var RescriptReactRouter = require("@rescript/react/src/RescriptReactRouter.bs.js");

function Recovery(Props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
        
      });
  var setMethods = match[1];
  var methods = match[0];
  React.useEffect((function () {
          var id = Belt_Map.get(Url.parseSearchParams(url), "flow");
          if (id !== undefined) {
            $$Promise.get($$Promise.Js.toResult(KratosClient.api.getSelfServiceRecoveryFlow(id)), (function (res) {
                    if (res.TAG === /* Ok */0) {
                      var payload = res._0;
                      return Curry._1(setMethods, (function (_prev) {
                                    return payload.data.ui;
                                  }));
                    }
                    var payload$1 = res._0;
                    console.log(payload$1.response);
                    if (payload$1.response.status !== 200) {
                      return RescriptReactRouter.push("/login");
                    }
                    
                  }));
          } else {
            var e = $$Window.redirect(KratosClient.recoverySelfServeEndpoint + Url.forwardSearchParams(url));
            if (e.TAG === /* Ok */0) {
              console.log("Window location set but page redirect failed.");
            } else {
              console.log(e._0);
            }
          }
          
        }), []);
  var loginForms = function (container) {
    var m = container.messages;
    return React.createElement("div", {
                className: "min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8"
              }, React.createElement("div", {
                    className: "max-w-md w-full space-y-8"
                  }, React.createElement("div", undefined, React.createElement("h2", {
                            className: "mt-6 text-center text-3xl font-extrabold text-gray-900"
                          }, Messages.Recovery.title)), m !== undefined ? m.map(function (m) {
                          return React.createElement("p", {
                                      key: String(m.id)
                                    }, m.text);
                        }) : null, React.createElement(Form.make, {
                        ui: container
                      })));
  };
  return React.createElement("div", undefined, methods !== undefined ? loginForms(methods) : null);
}

var make = Recovery;

exports.make = make;
/* Url Not a pure module */
