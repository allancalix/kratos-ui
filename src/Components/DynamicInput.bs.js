// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function DynamicInput$NonStandardProps(Props) {
  return React.cloneElement(Props.children, Props.props);
}

var NonStandardProps = {
  make: DynamicInput$NonStandardProps
};

var defaultClasses = "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm";

var submitClasses = "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500";

function DynamicInput$InputField(Props) {
  var attributes = Props.attributes;
  var placeholderOpt = Props.placeholder;
  var submitButtonLabel = Props.submitButtonLabel;
  var placeholder = placeholderOpt !== undefined ? placeholderOpt : "";
  var match = attributes.type;
  if (match === "submit") {
    return React.createElement("button", {
                className: submitClasses,
                name: attributes.name,
                placeholder: placeholder,
                required: Belt_Option.getWithDefault(attributes.required, false),
                type: attributes.type,
                value: Belt_Option.getWithDefault(attributes.value, "")
              }, Belt_Option.getWithDefault(submitButtonLabel, "Submit"));
  } else {
    return React.createElement("input", {
                defaultValue: Belt_Option.getWithDefault(attributes.value, ""),
                className: defaultClasses,
                name: attributes.name,
                placeholder: placeholder,
                required: Belt_Option.getWithDefault(attributes.required, false),
                type: attributes.type
              });
  }
}

var InputField = {
  make: DynamicInput$InputField
};

function DynamicInput(Props) {
  var node = Props.node;
  var label = node.meta.label;
  if (label !== undefined) {
    return React.createElement(React.Fragment, undefined, React.createElement(DynamicInput$NonStandardProps, {
                    props: {
                      "data-testid": "label"
                    },
                    children: React.createElement("label", {
                          key: label.id.toString(),
                          className: "sr-only"
                        }, label.text)
                  }), React.createElement(DynamicInput$InputField, {
                    attributes: node.attributes,
                    placeholder: label.text,
                    submitButtonLabel: label.text
                  }));
  } else {
    return React.createElement(DynamicInput$InputField, {
                attributes: node.attributes
              });
  }
}

var make = DynamicInput;

exports.NonStandardProps = NonStandardProps;
exports.defaultClasses = defaultClasses;
exports.submitClasses = submitClasses;
exports.InputField = InputField;
exports.make = make;
/* react Not a pure module */
