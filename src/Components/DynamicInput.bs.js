// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function DynamicInput$NonStandardProps(Props) {
  return React.cloneElement(Props.children, Props.props);
}

var NonStandardProps = {
  make: DynamicInput$NonStandardProps
};

var defaultClasses = "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm";

var errorClasses = "border-red-500 appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm";

var submitClasses = "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500";

function DynamicInput$InputField(Props) {
  var name = Props.name;
  var type = Props.type;
  var required = Props.required;
  var value = Props.value;
  var placeholder = Props.placeholder;
  var hasErrorOpt = Props.hasError;
  var buttonText = Props.buttonText;
  var hasError = hasErrorOpt !== undefined ? hasErrorOpt : false;
  if (type === "submit") {
    return React.createElement(DynamicInput$NonStandardProps, {
                props: {
                  "data-testid": type
                },
                children: React.createElement("button", {
                      className: submitClasses,
                      name: name,
                      placeholder: Belt_Option.getWithDefault(placeholder, ""),
                      required: required,
                      type: type,
                      value: Belt_Option.getWithDefault(value, "")
                    }, Belt_Option.getWithDefault(buttonText, "Submit"))
              });
  } else {
    return React.createElement(React.Fragment, undefined, React.createElement(DynamicInput$NonStandardProps, {
                    props: {
                      "data-testid": name
                    },
                    children: React.createElement("input", {
                          defaultValue: Belt_Option.getWithDefault(value, ""),
                          className: hasError ? errorClasses : defaultClasses,
                          name: name,
                          placeholder: Belt_Option.getWithDefault(placeholder, ""),
                          required: required,
                          type: type
                        })
                  }));
  }
}

var InputField = {
  make: DynamicInput$InputField
};

function DynamicInput$Messages(Props) {
  var messages = Props.messages;
  if (messages !== undefined) {
    return messages.map(function (msg) {
                return React.createElement("span", {
                            key: String(msg.id),
                            className: "flex items-center font-medium tracking-wide text-red-500 text-xs mt-1 ml-1"
                          }, msg.text);
              });
  } else {
    return null;
  }
}

var Messages = {
  make: DynamicInput$Messages
};

function hasErrorMessage(messages) {
  if (messages !== undefined) {
    return Belt_Option.isSome(Caml_option.undefined_to_opt(messages.find(function (m) {
                        return m.type === "error";
                      })));
  } else {
    return false;
  }
}

function DynamicInput(Props) {
  var name = Props.name;
  var type = Props.type;
  var label = Props.label;
  var value = Props.value;
  var requiredOpt = Props.required;
  var messages = Props.messages;
  var required = requiredOpt !== undefined ? requiredOpt : false;
  if (label !== undefined) {
    var tmp = {};
    if (messages !== undefined) {
      tmp.messages = Caml_option.valFromOption(messages);
    }
    return React.createElement(React.Fragment, undefined, React.createElement(DynamicInput$NonStandardProps, {
                    props: {
                      "data-testid": "label"
                    },
                    children: React.createElement("label", {
                          key: label.id.toString(),
                          className: "sr-only"
                        }, label.text)
                  }), React.createElement(DynamicInput$InputField, {
                    name: name,
                    type: type,
                    required: required,
                    value: value,
                    placeholder: label.text,
                    hasError: hasErrorMessage(messages),
                    buttonText: label.text
                  }), React.createElement(DynamicInput$Messages, tmp));
  }
  var tmp$1 = {};
  if (messages !== undefined) {
    tmp$1.messages = Caml_option.valFromOption(messages);
  }
  return React.createElement(React.Fragment, undefined, React.createElement(DynamicInput$InputField, {
                  name: name,
                  type: type,
                  required: required,
                  value: value
                }), React.createElement(DynamicInput$Messages, tmp$1));
}

var make = DynamicInput;

exports.NonStandardProps = NonStandardProps;
exports.defaultClasses = defaultClasses;
exports.errorClasses = errorClasses;
exports.submitClasses = submitClasses;
exports.InputField = InputField;
exports.Messages = Messages;
exports.hasErrorMessage = hasErrorMessage;
exports.make = make;
/* react Not a pure module */
